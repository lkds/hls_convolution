-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_V_ce0 : OUT STD_LOGIC;
    img_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_V_ce1 : OUT STD_LOGIC;
    img_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weight_V_ce1 : OUT STD_LOGIC;
    weight_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    feature_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    feature_V_ce0 : OUT STD_LOGIC;
    feature_V_we0 : OUT STD_LOGIC;
    feature_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    feature_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    feature_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    feature_V_ce1 : OUT STD_LOGIC;
    feature_V_we1 : OUT STD_LOGIC;
    feature_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    feature_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.880000,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=568,HLS_SYN_LUT=1109,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0191_0_reg_427 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln887_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_483 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_488 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal grp_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_505 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1305_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_537_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_reg_1309 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_543_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_1315 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln214_fu_567_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln214_reg_1320 : STD_LOGIC_VECTOR (6 downto 0);
    signal feature_V_addr_reg_1328 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_reg_1328_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_fu_586_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_reg_1333 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1353_1_fu_618_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1353_1_reg_1353 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_4_fu_624_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln21_4_reg_1358 : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_V_addr_1_reg_1363 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_1_reg_1363_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_load_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_2_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_1_fu_642_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_1_reg_1379 : STD_LOGIC_VECTOR (4 downto 0);
    signal weight_V_load_3_reg_1388 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_V_load_1_reg_1408 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_V_addr_2_reg_1413 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_3_reg_1418 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_4_reg_1423 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_4_reg_1423_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_5_reg_1428 : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_V_addr_5_reg_1428_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_V_load_4_reg_1433 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_2_fu_728_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_2_reg_1439 : STD_LOGIC_VECTOR (4 downto 0);
    signal weight_V_load_7_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1019_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_1_reg_1464 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_V_load_3_reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_reg_1474 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_8_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1026_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_18_reg_1503 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_V_load_5_reg_1508 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_1_reg_1513 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_5_reg_1523 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1034_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_4_reg_1532 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1042_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_5_reg_1537 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln700_22_reg_1552 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1049_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_27_reg_1557 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_V_load_6_reg_1562 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_11_reg_1572 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1069_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_36_reg_1587 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1076_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_13_reg_1592 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1083_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_15_reg_1597 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_V_load_14_reg_1602 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_16_fu_837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln700_16_fu_837_p2 : signal is "no";
    signal add_ln700_16_reg_1618 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1097_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_20_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1111_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_45_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1117_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_22_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1123_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_24_reg_1648 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_V_load_18_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1136_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_29_reg_1668 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_31_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln700_52_reg_1683 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1157_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_33_reg_1703 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1171_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_37_reg_1708 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal grp_fu_1178_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_reg_1718 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_2_reg_1723 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_9_reg_1728 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_6_reg_1738 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_17_fu_971_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_17_reg_1743 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_38_reg_1748 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_40_reg_1753 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_8_fu_984_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_8_reg_1758 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1215_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_42_reg_1763 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1228_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_46_reg_1768 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_44_fu_998_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_44_reg_1773 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_47_reg_1778 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_49_reg_1783 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1247_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_51_reg_1788 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_p_0191_0_phi_fu_431_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln559_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_1_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_2_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_4_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_2_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln22_3_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_5_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_6_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_7_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_8_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_4_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln22_5_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_6_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln22_7_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_8_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln22_9_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_10_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln22_11_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_12_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln22_13_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_14_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln22_15_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_16_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln22_17_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_18_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln22_20_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_1_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln22_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_3_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln22_19_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_26_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_35_fu_950_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_53_fu_1012_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln214_1_fu_555_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln214_fu_551_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln214_1_fu_563_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln214_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_fu_582_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln22_1_fu_594_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_1_fu_605_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln214_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_3_fu_639_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln22_2_fu_650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_3_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln214_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln214_1_fu_677_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln214_1_fu_686_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln214_2_fu_691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln214_2_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln214_3_fu_705_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln214_3_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln214_4_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln22_4_fu_735_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_5_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_6_fu_757_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_7_fu_767_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_8_fu_777_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_9_fu_787_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_10_fu_797_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_11_fu_807_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_12_fu_817_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_13_fu_827_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_14_fu_841_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_15_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_16_fu_861_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_17_fu_871_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln700_25_fu_885_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_25_fu_885_p2 : signal is "no";
    signal add_ln700_21_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_21_fu_881_p2 : signal is "no";
    signal or_ln22_18_fu_896_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_20_fu_906_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln22_fu_920_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_2_fu_930_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln700_34_fu_946_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_34_fu_946_p2 : signal is "no";
    signal add_ln700_30_fu_942_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_30_fu_942_p2 : signal is "no";
    signal or_ln22_19_fu_957_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln700_12_fu_967_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_12_fu_967_p2 : signal is "no";
    signal add_ln700_7_fu_980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_7_fu_980_p2 : signal is "no";
    signal add_ln700_3_fu_976_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_3_fu_976_p2 : signal is "no";
    signal add_ln700_43_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_43_fu_994_p2 : signal is "no";
    signal add_ln700_39_fu_990_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_39_fu_990_p2 : signal is "no";
    signal add_ln700_52_fu_1008_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_52_fu_1008_p2 : signal is "no";
    signal add_ln700_48_fu_1004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln700_48_fu_1004_p2 : signal is "no";
    signal grp_fu_1061_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1089_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1129_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1163_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1220_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv_mac_muladd_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_mac_muladd_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Conv_mac_muladd_8bkb_U1 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_478,
        din2 => reg_474,
        dout => grp_fu_1019_p3);

    Conv_mac_muladd_8bkb_U2 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_q0,
        din1 => reg_470,
        din2 => reg_492,
        dout => grp_fu_1026_p3);

    Conv_mac_muladd_8bkb_U3 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_q1,
        din1 => reg_483,
        din2 => reg_474,
        dout => grp_fu_1034_p3);

    Conv_mac_muladd_8bkb_U4 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => reg_505,
        din2 => reg_501,
        dout => grp_fu_1042_p3);

    Conv_mac_muladd_8bkb_U5 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_1474,
        din1 => img_V_q0,
        din2 => feature_V_load_3_reg_1469,
        dout => grp_fu_1049_p3);

    Conv_mac_muladd_8cud_U6 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => reg_470,
        din2 => grp_fu_1061_p3,
        dout => grp_fu_1055_p3);

    Conv_mac_muladd_8bkb_U7 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_478,
        din2 => reg_474,
        dout => grp_fu_1061_p3);

    Conv_mac_muladd_8bkb_U8 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_1474,
        din1 => img_V_q1,
        din2 => reg_492,
        dout => grp_fu_1069_p3);

    Conv_mac_muladd_8bkb_U9 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_5_reg_1523,
        din1 => reg_519,
        din2 => reg_488,
        dout => grp_fu_1076_p3);

    Conv_mac_muladd_8cud_U10 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => reg_496,
        din2 => grp_fu_1089_p3,
        dout => grp_fu_1083_p3);

    Conv_mac_muladd_8bkb_U11 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => reg_470,
        din2 => reg_510,
        dout => grp_fu_1089_p3);

    Conv_mac_muladd_8cud_U12 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => reg_514,
        din2 => grp_fu_1103_p3,
        dout => grp_fu_1097_p3);

    Conv_mac_muladd_8bkb_U13 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_483,
        din2 => reg_523,
        dout => grp_fu_1103_p3);

    Conv_mac_muladd_8bkb_U14 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_1474,
        din1 => img_V_q0,
        din2 => feature_V_load_5_reg_1508,
        dout => grp_fu_1111_p3);

    Conv_mac_muladd_8bkb_U15 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_5_reg_1523,
        din1 => reg_496,
        din2 => mul_ln700_22_reg_1552,
        dout => grp_fu_1117_p3);

    Conv_mac_muladd_8cud_U16 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => reg_505,
        din2 => grp_fu_1129_p3,
        dout => grp_fu_1123_p3);

    Conv_mac_muladd_8bkb_U17 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => img_V_load_14_reg_1602,
        din2 => reg_501,
        dout => grp_fu_1129_p3);

    Conv_mac_muladd_8cud_U18 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => reg_478,
        din2 => grp_fu_1142_p3,
        dout => grp_fu_1136_p3);

    Conv_mac_muladd_8bkb_U19 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_519,
        din2 => reg_474,
        dout => grp_fu_1142_p3);

    Conv_mac_muladd_8bkb_U20 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_5_reg_1523,
        din1 => reg_514,
        din2 => reg_527,
        dout => grp_fu_1150_p3);

    Conv_mac_muladd_8cud_U21 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => reg_470,
        din2 => grp_fu_1163_p3,
        dout => grp_fu_1157_p3);

    Conv_mac_muladd_8bkb_U22 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => reg_505,
        din2 => reg_510,
        dout => grp_fu_1163_p3);

    Conv_mac_muladd_8bkb_U23 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_496,
        din2 => reg_523,
        dout => grp_fu_1171_p3);

    Conv_mac_muladd_8bkb_U24 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_1474,
        din1 => img_V_q0,
        din2 => feature_V_load_reg_1368,
        dout => grp_fu_1178_p3);

    Conv_mac_muladd_8cud_U25 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => img_V_q1,
        din2 => add_ln700_1_reg_1464,
        dout => grp_fu_1184_p3);

    Conv_mac_muladd_8bkb_U26 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_1474,
        din1 => img_V_q1,
        din2 => feature_V_load_1_reg_1408,
        dout => grp_fu_1190_p3);

    Conv_mac_muladd_8cud_U27 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => img_V_q0,
        din2 => add_ln700_5_reg_1537,
        dout => grp_fu_1196_p3);

    Conv_mac_muladd_8cud_U28 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => reg_483,
        din2 => add_ln700_37_reg_1708,
        dout => grp_fu_1202_p3);

    Conv_mac_muladd_8bkb_U29 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_5_reg_1523,
        din1 => reg_478,
        din2 => reg_488,
        dout => grp_fu_1208_p3);

    Conv_mac_muladd_8cud_U30 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => img_V_load_14_reg_1602,
        din2 => grp_fu_1220_p3,
        dout => grp_fu_1215_p3);

    Conv_mac_muladd_8bkb_U31 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => reg_519,
        din2 => reg_501,
        dout => grp_fu_1220_p3);

    Conv_mac_muladd_8bkb_U32 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_3_reg_1388,
        din1 => reg_514,
        din2 => reg_474,
        dout => grp_fu_1228_p3);

    Conv_mac_muladd_8cud_U33 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_1_reg_1513,
        din1 => img_V_load_18_reg_1653,
        din2 => add_ln700_46_reg_1768,
        dout => grp_fu_1235_p3);

    Conv_mac_muladd_8bkb_U34 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_5_reg_1523,
        din1 => reg_483,
        din2 => reg_527,
        dout => grp_fu_1240_p3);

    Conv_mac_muladd_8cud_U35 : component Conv_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_6_reg_1562,
        din1 => reg_505,
        din2 => grp_fu_1253_p3,
        dout => grp_fu_1247_p3);

    Conv_mac_muladd_8bkb_U36 : component Conv_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_8_reg_1483,
        din1 => reg_496,
        din2 => mul_ln700_52_reg_1683,
        dout => grp_fu_1253_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0191_0_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_0191_0_reg_427 <= r_V_reg_1309;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0191_0_reg_427 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_478 <= img_V_q0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_478 <= img_V_q1;
            end if; 
        end if;
    end process;

    reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then 
                reg_483 <= img_V_q0;
            elsif ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_483 <= img_V_q1;
            end if; 
        end if;
    end process;

    reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then 
                reg_496 <= img_V_q1;
            elsif ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_496 <= img_V_q0;
            end if; 
        end if;
    end process;

    reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    reg_505 <= img_V_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                    reg_505 <= img_V_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then 
                    reg_514 <= img_V_q1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_514 <= img_V_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1353_1_reg_1353 <= add_ln1353_1_fu_618_p2;
                    feature_V_addr_1_reg_1363(2 downto 1) <= zext_ln559_4_fu_634_p1(3 - 1 downto 0)(2 downto 1);
                    feature_V_addr_reg_1328(2 downto 1) <= zext_ln559_fu_577_p1(3 - 1 downto 0)(2 downto 1);
                    shl_ln_reg_1315(5 downto 3) <= shl_ln_fu_543_p3(5 downto 3);
                    sub_ln214_reg_1320(6 downto 1) <= sub_ln214_fu_567_p2(6 downto 1);
                trunc_ln21_4_reg_1358 <= trunc_ln21_4_fu_624_p1;
                    trunc_ln_reg_1333(4 downto 3) <= trunc_ln_fu_586_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln700_11_reg_1572 <= grp_fu_1055_p3;
                add_ln700_36_reg_1587 <= grp_fu_1069_p3;
                weight_V_load_6_reg_1562 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln700_13_reg_1592 <= grp_fu_1076_p3;
                add_ln700_15_reg_1597 <= grp_fu_1083_p3;
                img_V_load_14_reg_1602 <= img_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                add_ln700_16_reg_1618 <= add_ln700_16_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln700_17_reg_1743 <= add_ln700_17_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln700_18_reg_1503 <= grp_fu_1026_p3;
                feature_V_load_5_reg_1508 <= feature_V_q1;
                weight_V_load_8_reg_1483 <= weight_V_q1;
                weight_V_load_reg_1474 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln700_1_reg_1464 <= grp_fu_1019_p3;
                feature_V_load_3_reg_1469 <= feature_V_q1;
                weight_V_load_4_reg_1433 <= weight_V_q0;
                weight_V_load_7_reg_1453 <= weight_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                add_ln700_20_reg_1623 <= grp_fu_1097_p3;
                add_ln700_45_reg_1638 <= grp_fu_1111_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                add_ln700_22_reg_1643 <= grp_fu_1117_p3;
                add_ln700_24_reg_1648 <= grp_fu_1123_p3;
                img_V_load_18_reg_1653 <= img_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln700_27_reg_1557 <= grp_fu_1049_p3;
                add_ln700_4_reg_1532 <= grp_fu_1034_p3;
                add_ln700_5_reg_1537 <= grp_fu_1042_p3;
                mul_ln700_22_reg_1552 <= grp_fu_444_p2;
                weight_V_load_1_reg_1513 <= weight_V_q0;
                weight_V_load_5_reg_1523 <= weight_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                add_ln700_29_reg_1668 <= grp_fu_1136_p3;
                add_ln700_31_reg_1673 <= grp_fu_1150_p3;
                mul_ln700_52_reg_1683 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                add_ln700_2_reg_1723 <= grp_fu_1184_p3;
                add_ln700_9_reg_1728 <= grp_fu_1190_p3;
                add_ln700_reg_1718 <= grp_fu_1178_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                add_ln700_33_reg_1703 <= grp_fu_1157_p3;
                add_ln700_37_reg_1708 <= grp_fu_1171_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln700_38_reg_1748 <= grp_fu_1202_p3;
                add_ln700_40_reg_1753 <= grp_fu_1208_p3;
                add_ln700_6_reg_1738 <= grp_fu_1196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln700_42_reg_1763 <= grp_fu_1215_p3;
                add_ln700_46_reg_1768 <= grp_fu_1228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln700_44_reg_1773 <= add_ln700_44_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln700_47_reg_1778 <= grp_fu_1235_p3;
                add_ln700_49_reg_1783 <= grp_fu_1240_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln700_51_reg_1788 <= grp_fu_1247_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln700_8_reg_1758 <= add_ln700_8_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    feature_V_addr_1_reg_1363_pp0_iter1_reg(2 downto 1) <= feature_V_addr_1_reg_1363(2 downto 1);
                    feature_V_addr_reg_1328_pp0_iter1_reg(2 downto 1) <= feature_V_addr_reg_1328(2 downto 1);
                icmp_ln887_reg_1305 <= icmp_ln887_fu_531_p2;
                icmp_ln887_reg_1305_pp0_iter1_reg <= icmp_ln887_reg_1305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    feature_V_addr_2_reg_1413(2 downto 1) <= zext_ln559_5_fu_681_p1(3 - 1 downto 0)(2 downto 1);
                    feature_V_addr_3_reg_1418(2 downto 1) <= zext_ln559_6_fu_695_p1(3 - 1 downto 0)(2 downto 1);
                    feature_V_addr_4_reg_1423(2 downto 1) <= zext_ln559_7_fu_709_p1(3 - 1 downto 0)(2 downto 1);
                    feature_V_addr_5_reg_1428(2 downto 1) <= zext_ln559_8_fu_723_p1(3 - 1 downto 0)(2 downto 1);
                    trunc_ln21_1_reg_1379(4 downto 3) <= trunc_ln21_1_fu_642_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    feature_V_addr_4_reg_1423_pp0_iter1_reg(2 downto 1) <= feature_V_addr_4_reg_1423(2 downto 1);
                    feature_V_addr_5_reg_1428_pp0_iter1_reg(2 downto 1) <= feature_V_addr_5_reg_1428(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                feature_V_load_1_reg_1408 <= feature_V_q1;
                feature_V_load_reg_1368 <= feature_V_q0;
                weight_V_load_2_reg_1373 <= weight_V_q0;
                weight_V_load_3_reg_1388 <= weight_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_reg_1309 <= r_V_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_470 <= img_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_474 <= grp_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_488 <= grp_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_492 <= feature_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_501 <= grp_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_510 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then
                reg_519 <= img_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_523 <= grp_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)))) then
                reg_527 <= grp_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    trunc_ln21_2_reg_1439(4 downto 3) <= trunc_ln21_2_fu_728_p3(4 downto 3);
            end if;
        end if;
    end process;
    shl_ln_reg_1315(2 downto 0) <= "000";
    sub_ln214_reg_1320(0) <= '0';
    feature_V_addr_reg_1328(0) <= '0';
    feature_V_addr_reg_1328_pp0_iter1_reg(0) <= '0';
    trunc_ln_reg_1333(2 downto 0) <= "000";
    feature_V_addr_1_reg_1363(0) <= '1';
    feature_V_addr_1_reg_1363_pp0_iter1_reg(0) <= '1';
    trunc_ln21_1_reg_1379(2 downto 0) <= "000";
    feature_V_addr_2_reg_1413(0) <= '0';
    feature_V_addr_3_reg_1418(0) <= '1';
    feature_V_addr_4_reg_1423(0) <= '0';
    feature_V_addr_4_reg_1423_pp0_iter1_reg(0) <= '0';
    feature_V_addr_5_reg_1428(0) <= '1';
    feature_V_addr_5_reg_1428_pp0_iter1_reg(0) <= '1';
    trunc_ln21_2_reg_1439(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, icmp_ln887_fu_531_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_531_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_531_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1353_1_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(ap_phi_mux_p_0191_0_phi_fu_431_p4));
    add_ln214_1_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(sub_ln214_reg_1320));
    add_ln214_2_fu_700_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(sub_ln214_reg_1320));
    add_ln214_3_fu_714_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(sub_ln214_reg_1320));
    add_ln214_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(sub_ln214_reg_1320));
    add_ln700_12_fu_967_p2 <= std_logic_vector(signed(add_ln700_11_reg_1572) + signed(add_ln700_9_reg_1728));
    add_ln700_16_fu_837_p2 <= std_logic_vector(signed(add_ln700_15_reg_1597) + signed(add_ln700_13_reg_1592));
    add_ln700_17_fu_971_p2 <= std_logic_vector(unsigned(add_ln700_16_reg_1618) + unsigned(add_ln700_12_fu_967_p2));
    add_ln700_21_fu_881_p2 <= std_logic_vector(signed(add_ln700_20_reg_1623) + signed(add_ln700_18_reg_1503));
    add_ln700_25_fu_885_p2 <= std_logic_vector(signed(add_ln700_24_reg_1648) + signed(add_ln700_22_reg_1643));
    add_ln700_26_fu_889_p2 <= std_logic_vector(unsigned(add_ln700_25_fu_885_p2) + unsigned(add_ln700_21_fu_881_p2));
    add_ln700_30_fu_942_p2 <= std_logic_vector(signed(add_ln700_29_reg_1668) + signed(add_ln700_27_reg_1557));
    add_ln700_34_fu_946_p2 <= std_logic_vector(signed(add_ln700_33_reg_1703) + signed(add_ln700_31_reg_1673));
    add_ln700_35_fu_950_p2 <= std_logic_vector(unsigned(add_ln700_34_fu_946_p2) + unsigned(add_ln700_30_fu_942_p2));
    add_ln700_39_fu_990_p2 <= std_logic_vector(signed(add_ln700_38_reg_1748) + signed(add_ln700_36_reg_1587));
    add_ln700_3_fu_976_p2 <= std_logic_vector(signed(add_ln700_2_reg_1723) + signed(add_ln700_reg_1718));
    add_ln700_43_fu_994_p2 <= std_logic_vector(signed(add_ln700_42_reg_1763) + signed(add_ln700_40_reg_1753));
    add_ln700_44_fu_998_p2 <= std_logic_vector(unsigned(add_ln700_43_fu_994_p2) + unsigned(add_ln700_39_fu_990_p2));
    add_ln700_48_fu_1004_p2 <= std_logic_vector(signed(add_ln700_47_reg_1778) + signed(add_ln700_45_reg_1638));
    add_ln700_52_fu_1008_p2 <= std_logic_vector(signed(add_ln700_51_reg_1788) + signed(add_ln700_49_reg_1783));
    add_ln700_53_fu_1012_p2 <= std_logic_vector(unsigned(add_ln700_52_fu_1008_p2) + unsigned(add_ln700_48_fu_1004_p2));
    add_ln700_7_fu_980_p2 <= std_logic_vector(signed(add_ln700_6_reg_1738) + signed(add_ln700_4_reg_1532));
    add_ln700_8_fu_984_p2 <= std_logic_vector(unsigned(add_ln700_7_fu_980_p2) + unsigned(add_ln700_3_fu_976_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_531_p2)
    begin
        if ((icmp_ln887_fu_531_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0191_0_phi_fu_431_p4_assign_proc : process(p_0191_0_reg_427, icmp_ln887_reg_1305, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, r_V_reg_1309, ap_block_pp0_stage0)
    begin
        if (((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_0191_0_phi_fu_431_p4 <= r_V_reg_1309;
        else 
            ap_phi_mux_p_0191_0_phi_fu_431_p4 <= p_0191_0_reg_427;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    feature_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, feature_V_addr_reg_1328_pp0_iter1_reg, feature_V_addr_2_reg_1413, feature_V_addr_4_reg_1423, feature_V_addr_4_reg_1423_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln559_fu_577_p1, ap_block_pp0_stage1, zext_ln559_5_fu_681_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            feature_V_address0 <= feature_V_addr_4_reg_1423_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            feature_V_address0 <= feature_V_addr_reg_1328_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            feature_V_address0 <= feature_V_addr_2_reg_1413;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            feature_V_address0 <= feature_V_addr_4_reg_1423;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            feature_V_address0 <= zext_ln559_5_fu_681_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            feature_V_address0 <= zext_ln559_fu_577_p1(3 - 1 downto 0);
        else 
            feature_V_address0 <= "XXX";
        end if; 
    end process;


    feature_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, feature_V_addr_1_reg_1363_pp0_iter1_reg, feature_V_addr_3_reg_1418, feature_V_addr_5_reg_1428, feature_V_addr_5_reg_1428_pp0_iter1_reg, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, zext_ln559_4_fu_634_p1, ap_block_pp0_stage1, zext_ln559_6_fu_695_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            feature_V_address1 <= feature_V_addr_5_reg_1428_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            feature_V_address1 <= feature_V_addr_1_reg_1363_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            feature_V_address1 <= feature_V_addr_3_reg_1418;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            feature_V_address1 <= feature_V_addr_5_reg_1428;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            feature_V_address1 <= zext_ln559_6_fu_695_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            feature_V_address1 <= zext_ln559_4_fu_634_p1(3 - 1 downto 0);
        else 
            feature_V_address1 <= "XXX";
        end if; 
    end process;


    feature_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            feature_V_ce0 <= ap_const_logic_1;
        else 
            feature_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feature_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            feature_V_ce1 <= ap_const_logic_1;
        else 
            feature_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    feature_V_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, add_ln700_8_reg_1758, add_ln700_44_reg_1773, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage9, add_ln700_26_fu_889_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            feature_V_d0 <= add_ln700_44_reg_1773;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            feature_V_d0 <= add_ln700_8_reg_1758;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            feature_V_d0 <= add_ln700_26_fu_889_p2;
        else 
            feature_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    feature_V_d1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, add_ln700_17_reg_1743, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage11, add_ln700_35_fu_950_p2, add_ln700_53_fu_1012_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            feature_V_d1 <= add_ln700_53_fu_1012_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            feature_V_d1 <= add_ln700_17_reg_1743;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            feature_V_d1 <= add_ln700_35_fu_950_p2;
        else 
            feature_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    feature_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln887_reg_1305, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln887_reg_1305_pp0_iter1_reg)
    begin
        if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            feature_V_we0 <= ap_const_logic_1;
        else 
            feature_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    feature_V_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln887_reg_1305, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln887_reg_1305_pp0_iter1_reg, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((icmp_ln887_reg_1305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln887_reg_1305_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            feature_V_we1 <= ap_const_logic_1;
        else 
            feature_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_438_p0_assign_proc : process(weight_V_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage10, weight_V_load_2_reg_1373, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage7, ap_block_pp0_stage10)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_438_p0 <= weight_V_load_2_reg_1373;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_438_p0 <= weight_V_q0;
        else 
            grp_fu_438_p0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_438_p1 <= img_V_q0;
    grp_fu_438_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_438_p0) * signed(grp_fu_438_p1))), 8));

    grp_fu_444_p0_assign_proc : process(weight_V_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, weight_V_load_4_reg_1433, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_444_p0 <= weight_V_load_4_reg_1433;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_444_p0 <= weight_V_q0;
        else 
            grp_fu_444_p0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_444_p1 <= img_V_q1;
    grp_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_444_p0) * signed(grp_fu_444_p1))), 8));
    grp_fu_450_p1 <= img_V_q0;
    grp_fu_450_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(weight_V_load_7_reg_1453) * signed(grp_fu_450_p1))), 8));
    grp_fu_455_p1 <= img_V_q1;
    grp_fu_455_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(weight_V_load_7_reg_1453) * signed(grp_fu_455_p1))), 8));
    grp_fu_460_p1 <= img_V_q1;
    grp_fu_460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(weight_V_load_2_reg_1373) * signed(grp_fu_460_p1))), 8));
    grp_fu_465_p1 <= img_V_q0;
    grp_fu_465_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(weight_V_load_4_reg_1433) * signed(grp_fu_465_p1))), 8));
    icmp_ln887_fu_531_p2 <= "1" when (ap_phi_mux_p_0191_0_phi_fu_431_p4 = ap_const_lv3_6) else "0";

    img_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, zext_ln22_1_fu_600_p1, zext_ln22_2_fu_656_p1, ap_block_pp0_stage1, zext_ln22_4_fu_741_p1, ap_block_pp0_stage2, zext_ln22_6_fu_762_p1, ap_block_pp0_stage3, zext_ln22_8_fu_782_p1, ap_block_pp0_stage4, zext_ln22_10_fu_802_p1, ap_block_pp0_stage5, zext_ln22_12_fu_822_p1, ap_block_pp0_stage6, zext_ln22_14_fu_846_p1, ap_block_pp0_stage7, zext_ln22_16_fu_866_p1, ap_block_pp0_stage8, zext_ln22_18_fu_901_p1, ap_block_pp0_stage9, zext_ln559_1_fu_916_p1, ap_block_pp0_stage10, zext_ln559_3_fu_937_p1, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                img_V_address0 <= zext_ln559_3_fu_937_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                img_V_address0 <= zext_ln559_1_fu_916_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                img_V_address0 <= zext_ln22_18_fu_901_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                img_V_address0 <= zext_ln22_16_fu_866_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                img_V_address0 <= zext_ln22_14_fu_846_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                img_V_address0 <= zext_ln22_12_fu_822_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                img_V_address0 <= zext_ln22_10_fu_802_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                img_V_address0 <= zext_ln22_8_fu_782_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                img_V_address0 <= zext_ln22_6_fu_762_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                img_V_address0 <= zext_ln22_4_fu_741_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_V_address0 <= zext_ln22_2_fu_656_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_V_address0 <= zext_ln22_1_fu_600_p1(3 - 1 downto 0);
            else 
                img_V_address0 <= "XXX";
            end if;
        else 
            img_V_address0 <= "XXX";
        end if; 
    end process;


    img_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, zext_ln559_2_fu_613_p1, ap_block_pp0_stage1, zext_ln22_3_fu_667_p1, ap_block_pp0_stage2, zext_ln22_5_fu_752_p1, ap_block_pp0_stage3, zext_ln22_7_fu_772_p1, ap_block_pp0_stage4, zext_ln22_9_fu_792_p1, ap_block_pp0_stage5, zext_ln22_11_fu_812_p1, ap_block_pp0_stage6, zext_ln22_13_fu_832_p1, ap_block_pp0_stage7, zext_ln22_15_fu_856_p1, ap_block_pp0_stage8, zext_ln22_17_fu_876_p1, ap_block_pp0_stage9, zext_ln22_20_fu_911_p1, ap_block_pp0_stage10, zext_ln22_fu_925_p1, ap_block_pp0_stage11, zext_ln22_19_fu_962_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                img_V_address1 <= zext_ln22_19_fu_962_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                img_V_address1 <= zext_ln22_fu_925_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                img_V_address1 <= zext_ln22_20_fu_911_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                img_V_address1 <= zext_ln22_17_fu_876_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                img_V_address1 <= zext_ln22_15_fu_856_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                img_V_address1 <= zext_ln22_13_fu_832_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                img_V_address1 <= zext_ln22_11_fu_812_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                img_V_address1 <= zext_ln22_9_fu_792_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                img_V_address1 <= zext_ln22_7_fu_772_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                img_V_address1 <= zext_ln22_5_fu_752_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_V_address1 <= zext_ln22_3_fu_667_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_V_address1 <= zext_ln559_2_fu_613_p1(3 - 1 downto 0);
            else 
                img_V_address1 <= "XXX";
            end if;
        else 
            img_V_address1 <= "XXX";
        end if; 
    end process;


    img_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_V_ce0 <= ap_const_logic_1;
        else 
            img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_V_ce1 <= ap_const_logic_1;
        else 
            img_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln214_fu_628_p2 <= (sext_ln214_fu_573_p1 or ap_const_lv8_1);
    or_ln22_10_fu_797_p2 <= (trunc_ln21_1_reg_1379 or ap_const_lv5_4);
    or_ln22_11_fu_807_p2 <= (trunc_ln21_2_reg_1439 or ap_const_lv5_4);
    or_ln22_12_fu_817_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_5);
    or_ln22_13_fu_827_p2 <= (trunc_ln21_1_reg_1379 or ap_const_lv5_5);
    or_ln22_14_fu_841_p2 <= (trunc_ln21_2_reg_1439 or ap_const_lv5_5);
    or_ln22_15_fu_851_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_6);
    or_ln22_16_fu_861_p2 <= (trunc_ln21_1_reg_1379 or ap_const_lv5_6);
    or_ln22_17_fu_871_p2 <= (trunc_ln21_2_reg_1439 or ap_const_lv5_6);
    or_ln22_18_fu_896_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_7);
    or_ln22_19_fu_957_p2 <= (trunc_ln21_1_reg_1379 or ap_const_lv5_7);
    or_ln22_1_fu_594_p2 <= (trunc_ln_fu_586_p3 or ap_const_lv5_2);
    or_ln22_20_fu_906_p2 <= (trunc_ln21_2_reg_1439 or ap_const_lv5_7);
    or_ln22_2_fu_650_p2 <= (trunc_ln21_1_fu_642_p3 or ap_const_lv5_1);
    or_ln22_3_fu_661_p2 <= (trunc_ln21_1_fu_642_p3 or ap_const_lv5_2);
    or_ln22_4_fu_735_p2 <= (trunc_ln21_2_fu_728_p3 or ap_const_lv5_1);
    or_ln22_5_fu_746_p2 <= (trunc_ln21_2_fu_728_p3 or ap_const_lv5_2);
    or_ln22_6_fu_757_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_3);
    or_ln22_7_fu_767_p2 <= (trunc_ln21_1_reg_1379 or ap_const_lv5_3);
    or_ln22_8_fu_777_p2 <= (trunc_ln21_2_reg_1439 or ap_const_lv5_3);
    or_ln22_9_fu_787_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_4);
    or_ln22_fu_920_p2 <= (trunc_ln_reg_1333 or ap_const_lv5_1);
    r_V_fu_537_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_0191_0_phi_fu_431_p4) + unsigned(ap_const_lv3_1));
        sext_ln214_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln214_fu_672_p2),8));

        sext_ln214_2_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln214_1_fu_686_p2),8));

        sext_ln214_3_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln214_2_fu_700_p2),8));

        sext_ln214_4_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln214_3_fu_714_p2),8));

        sext_ln214_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln214_fu_567_p2),8));

    shl_ln1352_1_fu_605_p3 <= (r_V_fu_537_p2 & ap_const_lv3_0);
    shl_ln1352_2_fu_930_p3 <= (add_ln1353_1_reg_1353 & ap_const_lv3_0);
    shl_ln214_1_fu_555_p3 <= (ap_phi_mux_p_0191_0_phi_fu_431_p4 & ap_const_lv1_0);
    shl_ln_fu_543_p3 <= (ap_phi_mux_p_0191_0_phi_fu_431_p4 & ap_const_lv3_0);
    sub_ln214_fu_567_p2 <= std_logic_vector(unsigned(zext_ln214_fu_551_p1) - unsigned(zext_ln214_1_fu_563_p1));
    trunc_ln21_1_fu_642_p3 <= (trunc_ln21_3_fu_639_p1 & ap_const_lv3_0);
    trunc_ln21_2_fu_728_p3 <= (trunc_ln21_4_reg_1358 & ap_const_lv3_0);
    trunc_ln21_3_fu_639_p1 <= r_V_reg_1309(2 - 1 downto 0);
    trunc_ln21_4_fu_624_p1 <= add_ln1353_1_fu_618_p2(2 - 1 downto 0);
    trunc_ln21_fu_582_p1 <= ap_phi_mux_p_0191_0_phi_fu_431_p4(2 - 1 downto 0);
    trunc_ln_fu_586_p3 <= (trunc_ln21_fu_582_p1 & ap_const_lv3_0);

    weight_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                weight_V_address0 <= ap_const_lv64_6(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                weight_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                weight_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weight_V_address0 <= ap_const_lv64_4(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weight_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            else 
                weight_V_address0 <= "XX";
            end if;
        else 
            weight_V_address0 <= "XX";
        end if; 
    end process;


    weight_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                weight_V_address1 <= ap_const_lv64_5(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                weight_V_address1 <= ap_const_lv64_8(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weight_V_address1 <= ap_const_lv64_7(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weight_V_address1 <= ap_const_lv64_3(2 - 1 downto 0);
            else 
                weight_V_address1 <= "XX";
            end if;
        else 
            weight_V_address1 <= "XX";
        end if; 
    end process;


    weight_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            weight_V_ce1 <= ap_const_logic_1;
        else 
            weight_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln214_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln214_1_fu_555_p3),7));
    zext_ln214_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_543_p3),7));
    zext_ln22_10_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_10_fu_797_p2),64));
    zext_ln22_11_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_11_fu_807_p2),64));
    zext_ln22_12_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_12_fu_817_p2),64));
    zext_ln22_13_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_13_fu_827_p2),64));
    zext_ln22_14_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_14_fu_841_p2),64));
    zext_ln22_15_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_15_fu_851_p2),64));
    zext_ln22_16_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_16_fu_861_p2),64));
    zext_ln22_17_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_17_fu_871_p2),64));
    zext_ln22_18_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_18_fu_896_p2),64));
    zext_ln22_19_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_19_fu_957_p2),64));
    zext_ln22_1_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_1_fu_594_p2),64));
    zext_ln22_20_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_20_fu_906_p2),64));
    zext_ln22_2_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_2_fu_650_p2),64));
    zext_ln22_3_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_3_fu_661_p2),64));
    zext_ln22_4_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_4_fu_735_p2),64));
    zext_ln22_5_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_5_fu_746_p2),64));
    zext_ln22_6_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_6_fu_757_p2),64));
    zext_ln22_7_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_7_fu_767_p2),64));
    zext_ln22_8_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_8_fu_777_p2),64));
    zext_ln22_9_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_9_fu_787_p2),64));
    zext_ln22_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_fu_920_p2),64));
    zext_ln559_1_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1315),64));
    zext_ln559_2_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_1_fu_605_p3),64));
    zext_ln559_3_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_2_fu_930_p3),64));
    zext_ln559_4_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln214_fu_628_p2),64));
    zext_ln559_5_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln214_1_fu_677_p1),64));
    zext_ln559_6_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln214_2_fu_691_p1),64));
    zext_ln559_7_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln214_3_fu_705_p1),64));
    zext_ln559_8_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln214_4_fu_719_p1),64));
    zext_ln559_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln214_fu_573_p1),64));
end behav;
